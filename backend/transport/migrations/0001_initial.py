# Generated by Django 4.2.7 on 2025-09-16 21:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("events", "0001_initial"),
        ("tickets", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="TransportGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("contact_person", models.CharField(max_length=100)),
                ("contact_phone", models.CharField(max_length=20)),
                ("contact_email", models.EmailField(max_length=254)),
                ("service_areas", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "default_rate_per_passenger",
                    models.DecimalField(decimal_places=2, default=0, max_digits=6),
                ),
                (
                    "default_rate_per_km",
                    models.DecimalField(decimal_places=2, default=0, max_digits=6),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="TransportRoute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("origin_name", models.CharField(max_length=200)),
                ("origin_address", models.TextField()),
                (
                    "origin_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "origin_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("destination_name", models.CharField(max_length=200)),
                ("destination_address", models.TextField()),
                (
                    "destination_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "destination_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("estimated_duration_minutes", models.PositiveIntegerField()),
                (
                    "estimated_distance_km",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                ("waypoints", models.JSONField(blank=True, default=list)),
                ("base_price", models.DecimalField(decimal_places=2, max_digits=6)),
                (
                    "price_per_passenger",
                    models.DecimalField(decimal_places=2, default=0, max_digits=6),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("license_plate", models.CharField(max_length=10, unique=True)),
                ("brand", models.CharField(max_length=50)),
                ("model", models.CharField(max_length=50)),
                ("year", models.PositiveIntegerField()),
                ("color", models.CharField(max_length=30)),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("car", "Auto"),
                            ("van", "Furgón"),
                            ("minibus", "Minibús"),
                            ("bus", "Bus"),
                            ("motorcycle", "Motocicleta"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "fuel_type",
                    models.CharField(
                        choices=[
                            ("gasoline", "Gasolina"),
                            ("diesel", "Diesel"),
                            ("electric", "Eléctrico"),
                            ("hybrid", "Híbrido"),
                            ("gas", "Gas"),
                        ],
                        max_length=20,
                    ),
                ),
                ("passenger_capacity", models.PositiveIntegerField()),
                ("has_air_conditioning", models.BooleanField(default=False)),
                ("has_wifi", models.BooleanField(default=False)),
                ("is_wheelchair_accessible", models.BooleanField(default=False)),
                ("has_seat_belts", models.BooleanField(default=True)),
                ("registration_expiry", models.DateField()),
                ("insurance_expiry", models.DateField()),
                ("technical_review_expiry", models.DateField()),
                ("is_active", models.BooleanField(default=True)),
                ("current_mileage", models.PositiveIntegerField(default=0)),
                ("last_maintenance_date", models.DateField(blank=True, null=True)),
                ("next_maintenance_due", models.DateField(blank=True, null=True)),
                ("maintenance_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_vehicles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "transport_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vehicles",
                        to="transport.transportgroup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TransportService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("departure_datetime", models.DateTimeField()),
                ("arrival_datetime", models.DateTimeField()),
                (
                    "return_departure_datetime",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "return_arrival_datetime",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("max_passengers", models.PositiveIntegerField()),
                ("current_passengers", models.PositiveIntegerField(default=0)),
                (
                    "price_per_passenger",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                (
                    "total_service_cost",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Programado"),
                            ("confirmed", "Confirmado"),
                            ("in_progress", "En Progreso"),
                            ("completed", "Completado"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("actual_departure_time", models.DateTimeField(blank=True, null=True)),
                ("actual_arrival_time", models.DateTimeField(blank=True, null=True)),
                ("special_instructions", models.TextField(blank=True)),
                ("accessibility_features", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "driver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="driven_services",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transport_services",
                        to="events.event",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="transport.transportroute",
                    ),
                ),
                (
                    "transport_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="transport.transportgroup",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="transport.vehicle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TransportIncident",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "incident_type",
                    models.CharField(
                        choices=[
                            ("delay", "Retraso"),
                            ("mechanical", "Problema Mecánico"),
                            ("accident", "Accidente"),
                            ("no_show_driver", "Conductor No Asistió"),
                            ("route_change", "Cambio de Ruta"),
                            ("other", "Otro"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Baja"),
                            ("medium", "Media"),
                            ("high", "Alta"),
                            ("critical", "Crítica"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("is_resolved", models.BooleanField(default=False)),
                ("resolution_notes", models.TextField(blank=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "reported_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reported_incidents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_incidents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "transport_service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incidents",
                        to="transport.transportservice",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PassengerBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pickup_location", models.CharField(max_length=200)),
                (
                    "pickup_latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "pickup_longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("booked", "Reservado"),
                            ("confirmed", "Confirmado"),
                            ("checked_in", "Registrado"),
                            ("boarded", "Abordó"),
                            ("completed", "Completado"),
                            ("no_show", "No Asistió"),
                            ("cancelled", "Cancelado"),
                        ],
                        default="booked",
                        max_length=20,
                    ),
                ),
                ("seat_number", models.CharField(blank=True, max_length=10)),
                ("estimated_pickup_time", models.DateTimeField()),
                ("actual_pickup_time", models.DateTimeField(blank=True, null=True)),
                ("check_in_time", models.DateTimeField(blank=True, null=True)),
                ("special_needs", models.TextField(blank=True)),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(blank=True, max_length=20),
                ),
                ("qr_code_used", models.BooleanField(default=False)),
                ("qr_scan_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "passenger",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transport_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transport_booking",
                        to="tickets.ticket",
                    ),
                ),
                (
                    "transport_service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="passenger_bookings",
                        to="transport.transportservice",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TransportRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                (
                    "punctuality_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "vehicle_condition_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "driver_service_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("would_use_again", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "driver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_transport_ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "passenger",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transport_ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "transport_service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="transport.transportservice",
                    ),
                ),
            ],
            options={
                "unique_together": {("transport_service", "passenger")},
            },
        ),
    ]
