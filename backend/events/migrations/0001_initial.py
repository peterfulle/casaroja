# Generated by Django 4.2.7 on 2025-09-16 21:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("color", models.CharField(default="#007bff", max_length=7)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=300)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("session", "Sesión Individual"),
                            ("workshop", "Taller"),
                            ("performance", "Presentación"),
                            ("exhibition", "Exposición"),
                            ("conference", "Conferencia"),
                            ("festival", "Festival"),
                        ],
                        default="session",
                        max_length=20,
                    ),
                ),
                ("start_datetime", models.DateTimeField()),
                ("end_datetime", models.DateTimeField()),
                ("duration_minutes", models.PositiveIntegerField()),
                ("requires_transport", models.BooleanField(default=False)),
                ("meeting_point", models.CharField(blank=True, max_length=200)),
                ("base_price", models.DecimalField(decimal_places=2, max_digits=8)),
                ("max_participants", models.PositiveIntegerField(default=1)),
                ("min_participants", models.PositiveIntegerField(default=1)),
                (
                    "main_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="events/images/"
                    ),
                ),
                ("gallery_images", models.JSONField(blank=True, default=list)),
                ("video_url", models.URLField(blank=True)),
                ("is_recurring", models.BooleanField(default=False)),
                ("recurring_pattern", models.JSONField(blank=True, default=dict)),
                ("allows_cancellation", models.BooleanField(default=True)),
                ("cancellation_hours", models.PositiveIntegerField(default=24)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Borrador"),
                            ("published", "Publicado"),
                            ("sold_out", "Agotado"),
                            ("cancelled", "Cancelado"),
                            ("completed", "Completado"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("featured", models.BooleanField(default=False)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("requirements", models.TextField(blank=True)),
                (
                    "difficulty_level",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="events.category",
                    ),
                ),
                (
                    "cultor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cultor_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["start_datetime"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("capacity", models.PositiveIntegerField(default=1)),
                ("has_parking", models.BooleanField(default=False)),
                ("has_accessibility", models.BooleanField(default=False)),
                ("has_audio_equipment", models.BooleanField(default=False)),
                ("contact_name", models.CharField(blank=True, max_length=100)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="EventDiscount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "discount_type",
                    models.CharField(
                        choices=[("percentage", "Porcentaje"), ("fixed", "Monto Fijo")],
                        max_length=20,
                    ),
                ),
                ("discount_value", models.DecimalField(decimal_places=2, max_digits=8)),
                ("max_uses", models.PositiveIntegerField(blank=True, null=True)),
                ("used_count", models.PositiveIntegerField(default=0)),
                ("max_uses_per_user", models.PositiveIntegerField(default=1)),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                (
                    "minimum_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                ("applicable_user_types", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discounts",
                        to="events.event",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="event",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="events",
                to="events.location",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="organizer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="organized_events",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("comment", models.TextField(blank=True)),
                (
                    "rating_content",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "rating_organization",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "rating_location",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("would_recommend", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cultor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="events.event",
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("event", "reviewer")},
            },
        ),
    ]
